// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model UserRole {
  id     Int    @id @default(autoincrement())
  role   Roles
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Roles {
  ADMIN
  CUSTOMER
  EMPLOYEE
}

model User {
  id            String     @id @default(cuid())
  name          String?
  image         String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  password      String?
  roles         UserRole[]
  isActive      Boolean    @default(false)
  hasEntity     Boolean    @default(false)
  accounts      Account[]
  owner         Owner?
  vet           Vet?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Owner {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  gender       String?
  email        String
  mobileNumber String?
  address      String?
  imageUrl     String?
  pets         Pet[]
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Pet {
  id          Int           @id @default(autoincrement())
  name        String
  type        String
  imageUrl    String?
  owner       Owner         @relation(fields: [ownerId], references: [id])
  ownerId     Int
  Appointment Appointment[]

  @@index([ownerId])
}

model Vet {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  gender       String?
  email        String
  mobileNumber String?
  address      String?
  imageUrl     String?
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Appointment  Appointment[]

  @@index([userId])
}

model Appointment {
  id          Int      @id @default(autoincrement())
  subject     String
  startTime   DateTime
  endTime     DateTime
  description String
  vetId       Int
  vet         Vet      @relation(fields: [vetId], references: [id], onDelete: Cascade)
  petId       Int
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([vetId])
  @@index([petId])
}
